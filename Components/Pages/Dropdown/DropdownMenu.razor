@page "/dropdown-menu"

<PageTitle>Dropdown Menu - Example</PageTitle>

<h3>Dropdown Menu</h3>
<SfDropDownButton Content="@ButtonContent" IconCss="fas fa-bars">
    <DropDownMenuAnimationSettings Effect="@FadeInEffect" Duration="@Duration" Easing="@Easing"></DropDownMenuAnimationSettings>
    <DropDownButtonEvents OnOpen="OnOpen" ItemSelected="ItemSelected"></DropDownButtonEvents>
    <DropDownMenuItems>
        <DropDownMenuItem Text="Cut" IconCss="fas fa-cut"></DropDownMenuItem>
        <DropDownMenuItem Text="Copy" IconCss="fas fa-copy"></DropDownMenuItem>
        <DropDownMenuItem Text="Paste" IconCss="fas fa-paste"></DropDownMenuItem>
        <DropDownMenuItem Text="Delete" IconCss="fas fa-x" Disabled="DropdownMenuState"></DropDownMenuItem>
        <DropDownMenuItem Text="Search" IconCss="fas fa-search" 
            Url="https://www.google.com" HtmlAttributes="@(new() { { "target", "_blank" } })"></DropDownMenuItem>
        <DropDownMenuItem Separator=true></DropDownMenuItem>
        <DropDownMenuItem Text="Font"></DropDownMenuItem>
        <DropDownMenuItem Text="Paragraph"></DropDownMenuItem>
    </DropDownMenuItems>
</SfDropDownButton>

<p class="mt-4">Last selected item: @LastSelected</p>
<br/>

<SfDropDownButton Content="Custom Dropdown" IconCss="fas fa-bars" Items="@DropdownItems">
    <ChildContent>
        <DropDownMenuAnimationSettings Effect="@SlideDownEffect" Duration="@Duration" Easing="@Easing"></DropDownMenuAnimationSettings>
    </ChildContent>
    <ItemTemplate>
        @{
            var menuItem = context;

            if (!string.IsNullOrEmpty(menuItem.Url))
            {
                // Render item as a link if URL is present
                <div>
                    <span class="e-menu-icon @menuItem.IconCss"></span>
                    <a href="@menuItem.Url" target="_blank" rel="noopener noreferrer">
                        <span class="custom-class">@menuItem.Text</span>
                    </a>
                </div>
            }
            else
            {
                // Render item as text if no URL is present
                <div>
                    <span class="e-menu-icon @menuItem.IconCss"></span>
                    <span class="custom-class">@menuItem.Text</span>
                </div>
            }
        }
    </ItemTemplate>
</SfDropDownButton>

@code {
    public string ButtonContent = "Options";
    public bool DropdownMenuState = false;
    public string LastSelected = string.Empty;

    private DropDownMenuAnimationEffect SlideDownEffect = DropDownMenuAnimationEffect.SlideDown;
    private DropDownMenuAnimationEffect FadeInEffect = DropDownMenuAnimationEffect.FadeIn;
    private int Duration = 1000;
    private string Easing = "ease";

    private List<DropDownMenuItem> DropdownItems = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "Home", IconCss = "e-icons e-home" },
        new DropDownMenuItem { Text = "Search", IconCss = "e-icons e-search", Url = "http://www.google.com" },
        new DropDownMenuItem { Text = "Yes / No", IconCss = "e-icons e-check-box" },
        new DropDownMenuItem { Text = "Text", IconCss = "e-icons e-caption" },
        new DropDownMenuItem { Separator = true },
        new DropDownMenuItem { Text = "Syncfusion", IconCss = "e-icons e-mouse-pointer", Url = "http://www.syncfusion.com" }
    };

    private void OnOpen(BeforeOpenCloseMenuEventArgs args)
    {
        DropdownMenuState = !DropdownMenuState;
    }

    private void ItemSelected(MenuEventArgs args)
    {
        LastSelected = args.Item.Text;
    }
}

<style>
    .e-dropdown-btn:hover {
        background-color: black;
        transition: background-color 0.3s ease-in-out;
    }

    .e-dropdown-popup ul .e-item:hover {
		background-color: red;
		transition: background-color 0.3s ease-in-out;
    }
</style>
